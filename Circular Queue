#include<stdio.h>
#include<stdlib.h>

struct CircularQueue{
    int size;
    int r;
    int f;
    int *arr;
};

int isEmpty(struct CircularQueue*q){
    if(q->r == q->f){
        return 1;
    }
    return 0;
}

int isFull(struct CircularQueue*q){
    if((q->r+1)%q->size == q->f){
        return 1;
    }
    return 0;
}

void enqueue(struct CircularQueue*q, int val){
    if(isFull(q)){
        printf("The Queue is Full!\n");
    }
    else{
        q->r=(q->r+1)%q->size;
        q->arr[q->r] =  val;
        printf("Element Enqueued: %d\n", val);
    }
}

int dequeue(struct CircularQueue*q){
    int a =  -1;
    if(isEmpty(q)){
        printf("The queue is Empty!\n");
    }
    else{
        q->f =(q->f+1)%q->size;
        a= q->arr[q->f];
    }
    return a;
}

int main(){
    struct CircularQueue q;
    q.size = 5;
    q.f = q.r = 0;
    q.arr = (int*)malloc(q.size*sizeof(int));
    enqueue(&q, 12);
    enqueue(&q, 102);
    enqueue(&q, 13);
    enqueue(&q, 132);
    printf("Dequeued Element:%d \n",dequeue(&q));
    printf("Dequeued Element:%d \n",dequeue(&q));

    if (isEmpty(&q)){
        printf("Queue is Empty\n");
    }
    if(isFull(&q)){
        printf("Queue is Full\n");
    }
    return 0;
}
