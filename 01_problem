// Problem
// You are given two arrays  and of length You can select any subarray and then sort the 
// elements in ascending order of that subarray for arrays A and B
// Find the minimum length of the subarray you can choose to make and same after performing 
// the operation and  are permutations of each other.

// Input Format:
// The first line contains an integer 
//  denoting the number of test cases.
// The first line of each test case contains an integer 
// The next line of each test case contains space-separated integers, elements of array 
// The next line of each test case contains space-separated integers, elements of array 

// Output Format:
// For each test case, print the minimum length of the subarray you can choose to make 
//  same after performing the operation.


#include <stdio.h>
#include <stdlib.h>

// Comparison function for qsort
int cmp(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int main() {
    int t;
    scanf("%d", &t);

    while (t--) {
        int n;
        scanf("%d", &n);

        int A[n], B[n];
        for (int i = 0; i < n; i++) scanf("%d", &A[i]);
        for (int i = 0; i < n; i++) scanf("%d", &B[i]);

        // Copy arrays for checking permutation condition
        int A_copy[n], B_copy[n];
        for (int i = 0; i < n; i++) {
            A_copy[i] = A[i];
            B_copy[i] = B[i];
        }

        qsort(A_copy, n, sizeof(int), cmp);
        qsort(B_copy, n, sizeof(int), cmp);

        // If sorted arrays are not same, not possible
        int possible = 1;
        for (int i = 0; i < n; i++) {
            if (A_copy[i] != B_copy[i]) {
                possible = 0;
                break;
            }
        }

        if (!possible) {
            printf("-1\n");
            continue;
        }

        // Find first mismatch from left
        int L = -1, R = -1;
        for (int i = 0; i < n; i++) {
            if (A[i] != B[i]) {
                L = i;
                break;
            }
        }

        // If arrays already equal
        if (L == -1) {
            printf("0\n");
            continue;
        }

        // Find first mismatch from right
        for (int i = n - 1; i >= 0; i--) {
            if (A[i] != B[i]) {
                R = i;
                break;
            }
        }

        printf("%d\n", R - L + 1);
    }

    return 0;
}
