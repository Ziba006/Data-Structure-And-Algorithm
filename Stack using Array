#include<stdio.h>
#include<stdlib.h>

struct stack{
    int size;
    int top;
    int *arr;
};

int isEmpty(struct stack*ptr){
    if(ptr->top == -1){
        return 1;
    }
    return 0;
}

int isFull(struct stack*ptr){
    if(ptr->top == ptr->size-1){
        return 1;
    }
    return 0;
}

void push(struct stack*ptr, int val){
    if (isFull(ptr)){
        printf("Stack Overflow! Elemnt %d  cannot be pushed.",val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}

int pop(struct stack*ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! No elements to remove. ");
        return -1;
    }
    else{
        int val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

int peek(struct stack*ptr, int i){
    int arrIndex = ptr->top-i+1;
    if(arrIndex <  0){
        printf("Invalid stack");
        return -1;
    }return ptr->arr[arrIndex];
}
int main(){
    struct stack*ptr = (struct stack*)malloc(sizeof(struct stack));
    ptr-> size = 50;
    ptr-> top = -1;
    ptr->arr = (int*)malloc(ptr->size*sizeof(int));

    printf("Stack has been created successfully!\n");
    push(ptr,3);
    push(ptr,30);
    push(ptr,32);
    push(ptr,53);
    push(ptr,93);
    printf("After pushing full %d\n",isFull(ptr));
    printf("After pushing empty %d\n",isEmpty(ptr));
    printf("Popped %d from the stack\n",pop(ptr));
    printf("Popped %d from the stack\n",pop(ptr));
    
    for(int j = 1;j<= ptr->top+1; j++){
        printf("The value at position %d is %d\n",j,peek(ptr,j));
    }

    free(ptr->arr);
    free(ptr);

    return 0;
}
