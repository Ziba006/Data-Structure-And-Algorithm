#include<stdio.h>
#include<stdlib.h>

struct stack{
    int size;
    int top;
    char *arr;
};

int isEmpty(struct stack*ptr){
    if(ptr->top == -1){
        return 1;
    }
    return 0;
}

int isFull(struct stack*ptr){
    if(ptr->top == ptr->size-1){
        return 1;
    }
    return 0;
}

void push(struct stack*ptr, char val){
    if (isFull(ptr)){
        printf("Stack Overflow! Elemnt %d  cannot be pushed.",val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
char pop(struct stack*ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! No elements to remove. ");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

int peek(struct stack*ptr, int i){
    int arrIndex = ptr->top-i+1;
    if(arrIndex <  0){
        printf("Invalid stack");
        return -1;
    }return ptr->arr[arrIndex];
}


int match(char a, char b){
    if(a == '{' && b == '}'){
        return 1;
    }
    if(a == '(' && b == ')'){
        return 1;
    }
    if(a == '[' && b == ']'){
        return 1;
    }
    return 0;
}

int ParenthesisMatch(char *exp){
    struct stack*ptr = (struct stack*) malloc(sizeof(struct stack));;
    ptr -> size = 100;
    ptr -> top =  -1;
    ptr -> arr = (char*)malloc(ptr->size *sizeof(char));
    char pooped_ch;
    for(int i=0; exp[i] != '\0'; i++){
        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){
            push(ptr, exp[i]);
        }
        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){
            if (isEmpty(ptr)){
                return 0;
            }
            char popped_ch =pop(ptr);
            if(!match(popped_ch,exp[i])){
                return 0;
            }
        }
    }
    if (isEmpty(ptr)) {
    return 1;  // Balanced
    }
    return 0;  // Unbalanced
}

int main() {
    char *exp = "{[(a*bc)df\eg])}";   // Balanced example
    if (ParenthesisMatch(exp)) {
        printf("The parentheses are balanced.\n");
    } else {
        printf("The parentheses are NOT balanced.\n");
    }
    return 0;
}
