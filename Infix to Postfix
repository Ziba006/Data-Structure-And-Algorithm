#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct stack{
    int size;
    int top;
    char *arr;
};

int StackTop(struct stack*ptr){
    return ptr->arr[ptr->top];
}

int isEmpty(struct stack*ptr){
    if(ptr->top == -1){
        return 1;
    }
    return 0;
}

int isFull(struct stack*ptr){
    if(ptr->top == ptr->size-1){
        return 1;
    }
    return 0;
}

void push(struct stack*ptr, char val){
    if (isFull(ptr)){
        printf("Stack Overflow! Elemnt %c  cannot be pushed.",val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
char pop(struct stack*ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! No elements to remove. ");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

int precedence(char ch){
    if(ch =='*' || ch == '/')
        return 3;
    else if(ch == '+' || ch =='-')
        return 2;
    else
        return 0;
}

int isOperator(char ch){
    if(ch == '+'  || ch =='-' || ch == '*' || ch == '/')
        return 1;
    else
        return 0;
}

char *InfixToPostfix(char *infix){
    struct stack*ptr = (struct stack*) malloc(sizeof(struct stack));
    ptr -> size = 100;
    ptr -> top =  -1;
    ptr -> arr = (char*)malloc(ptr->size *sizeof(char));

    char *postfix = (char*)malloc((strlen(infix) +1)*sizeof(char));
    int i = 0; 
    int j = 0;

    while (infix[i] != '\0'){
        if(!isOperator(infix[i])){
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else{
            while (!isEmpty(ptr) && precedence(infix[i]) <= precedence(StackTop(ptr))){
                postfix[j] = pop(ptr);
                j++;
            }
            push(ptr,infix[i]);
            i++;
        }   // closes else
    }       // closes while
    while (!isEmpty(ptr)){
        postfix[j] = pop(ptr);
        j++;
    }
    postfix[j] = '\0';
    return postfix;
}

int main(){
    char *infix = "x-y/z-k*d";
    printf("The postfix Expression is %s", InfixToPostfix(infix));
    return 0;
}
