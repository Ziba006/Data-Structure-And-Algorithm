#include<stdio.h>
#include<stdlib.h>

struct Node{
    int data;
    struct Node*next;
};

struct Node*front = NULL;
struct Node*rear  = NULL;

void enqueue(int value){
    struct Node*newNode = (struct Node*)malloc(sizeof(struct Node));
    if(!newNode){
        printf("Queue Overflow!\n");
        return;
    }
    newNode->data = value;
    newNode->next = NULL;
    if(rear == NULL){                  // Queue is empty
        front = rear = newNode;
    }
    else{
        rear->next = newNode;
        rear = newNode;
    }
    printf("%d Enqueued to Queue.\n", value);
}

void dequeue(){
    if(front == NULL){
        printf("Queue underflow\n");
        return;
    }
    struct Node*temp = front;
    printf("%d dequeued from queue\n", front->data);
    front = front->next;
    free(temp);
}


void peek(){
    if(front == NULL){
        printf("Queue is Empty\n");
        return;
    }
    printf("The top element is %d\n", front->data);
}

void display(){
    if(front == NULL){
        printf("Queue is Empty\n");
        return;
    }
    struct Node*temp = front;
    printf("Queue element: \n");
    while(temp != NULL){
        printf("%d \n", temp->data);
        temp =temp->next;
    }
    printf("NULL\n");
}

int main(){
    int choice, value;
    while(1){
        printf("______Queue Menu_____\n");
        printf("Enter choice: 1. Enqueue 2. Dequeue 3. peek 4. display 5.exit\n");
        printf("Enter choice: \n");
        scanf("%d", &choice);
        switch(choice){
            case 1:
            printf("Enter value to enqueue: \n");
            scanf("%d", &value);
            enqueue(value);
            break;
            case 2:
            dequeue();
            break;
            case 3:
            peek();
            break;
            case 4:
            display();
            break;
            case 5:
            exit(0);
            break;
        }
    }
    return 0;
}
