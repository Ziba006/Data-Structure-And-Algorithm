#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node*right;
    struct node*left;
};

struct node*CreateNode(int data){
    struct node*n = (struct node*)malloc(sizeof(struct node));
    n->data = data;
    n->left = NULL;
    n->right = NULL;
    return n;
};

int isBST(struct node*root){
    static struct node*prev = NULL;
    if(root != NULL){
        if(!isBST(root->left)){
            return 0;
        }
        if(prev != NULL && root->data <=prev->data){
            return 0;
        }
        prev = root;
        return isBST(root->right);
    }
    else{
        return 1;
    }
}

int main(){
    struct node*p = CreateNode(9);
    struct node*p1 = CreateNode(5);
    struct node*p2 = CreateNode(10);
    struct node*p3 = CreateNode(2);
    struct node*p4 = CreateNode(8);

    p->left = p1;
    p->right = p2;
    p1->left = p3;                                                    

    p1 ->right = p4;

    if(isBST(p)){
        printf("It is a Binary Search Tree. \n");
    }
    else{
        printf("It is not a Binary Search Tree. \n");
    }

    return 0;
}
