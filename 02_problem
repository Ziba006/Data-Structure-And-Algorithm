/ Problem
// A city has N Tram stations numbered from 1 to N  that are connected to one another and form a 
// circle. You are given an array ticket_cost  where ticket_cost[i] is the cost of a ticket 
// between the stops number i and (i + 1) % N. The Tram can travel in both directions i.e. 
// clockwise and anti-clockwise.
// Return the minimum cost to travel between the given start and finish station.
// You are given an integer N where N represents the total number of the tram stations, 
// an integer start which represents the start station, and an integer finish which represents
// the finish station. You are given an array of positive integers  ticket_cost where 
// ticket_cost[i] represents the ticket cost between the station number i and (i + 1) % N.


#include<stdio.h>
#include<stdbool.h>
#include<malloc.h>

long long solve (int N, int start, int finish, int* Ticket_cost) {
    long long total = 0;
    for (int i = 0; i < N; i++) {
        total += Ticket_cost[i];
    }

    // normalize start and finish to 0-based index
    int s = start - 1;
    int f = finish - 1;

    // clockwise cost
    long long clockwise = 0;
    for (int i = s; i != f; i = (i + 1) % N) {
        clockwise += Ticket_cost[i];
    }

    long long anticlockwise = total - clockwise;

    return (clockwise < anticlockwise) ? clockwise : anticlockwise;
}
int main() {
    int N;
    scanf("%d", &N);
    int start;
    scanf("%d", &start);
    int finish;
    scanf("%d", &finish);
    int i_Ticket_cost;
    int *Ticket_cost = (int *)malloc(sizeof(int)*(N));
    for(i_Ticket_cost = 0; i_Ticket_cost < N; i_Ticket_cost++)
    	scanf("%d", &Ticket_cost[i_Ticket_cost]);

    long long out_ = solve(N, start, finish, Ticket_cost);
    printf("%lld", out_);
}
